name: Claude AI Assistant

on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created]

permissions:
  issues: write
  contents: read

jobs:
  claude-response:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        npm init -y
        npm install @anthropic-ai/sdk
        
    - name: Run Claude AI Assistant
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: |
        cat << 'EOF' > claude-assistant.js
        const Anthropic = require('@anthropic-ai/sdk');
        const https = require('https');
        
        const anthropic = new Anthropic({
          apiKey: process.env.ANTHROPIC_API_KEY,
        });
        
        async function main() {
          try {
            console.log('üöÄ Claude Assistant ÈñãÂßã');
            
            const context = JSON.parse(process.env.GITHUB_CONTEXT || '{}');
            console.log('„Ç§„Éô„É≥„Éà:', context.event_name);
            
            let issueBody = '';
            let issueNumber = null;
            
            if (context.event_name === 'issues') {
              issueBody = context.event.issue?.body || '';
              issueNumber = context.event.issue?.number;
            } else if (context.event_name === 'issue_comment') {
              issueBody = context.event.comment?.body || '';
              issueNumber = context.event.issue?.number;
            }
            
            console.log('IssueÁï™Âè∑:', issueNumber);
            console.log('Êú¨Êñá:', issueBody);
            
            // @claude „É°„É≥„Ç∑„Éß„É≥„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅÆ„ÅøÂÆüË°å
            if (!issueBody.includes('@claude')) {
              console.log('‚ùå @claude „É°„É≥„Ç∑„Éß„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
              return;
            }
            
            console.log('‚úÖ @claude „É°„É≥„Ç∑„Éß„É≥Áô∫Ë¶ã');
            
            // API„Ç≠„Éº„ÉÅ„Çß„ÉÉ„ÇØ
            if (!process.env.ANTHROPIC_API_KEY) {
              throw new Error('ANTHROPIC_API_KEY „ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
            }
            
            const message = issueBody.replace(/@claude/g, '').trim();
            console.log('Claude „Å´ÈÄÅ‰ø°„Åô„Çã„É°„ÉÉ„Çª„Éº„Ç∏:', message);
            
            const response = await anthropic.messages.create({
              model: 'claude-sonnet-4-20250514',
              max_tokens: 4000,
              messages: [{
                role: 'user',
                content: `‰ª•‰∏ã„ÅÆGitHub„ÅÆË™≤È°å„Å´„Å§„ÅÑ„Å¶„ÄÅÊäÄË°ìÁöÑ„Å™„Ç¢„Éâ„Éê„Ç§„Çπ„Çí„ÅäÈ°ò„ÅÑ„Åó„Åæ„ÅôÔºö\n\n${message}`
              }]
            });
            
            const reply = response.content[0].text;
            console.log('Claude „Åã„Çâ„ÅÆËøîÁ≠î:', reply.substring(0, 100) + '...');
            
            // GitHub API„Çí‰Ωø„Å£„Å¶„Ç≥„É°„É≥„Éà„ÇíÊäïÁ®ø
            const repoFullName = context.repository.full_name;
            const commentData = JSON.stringify({
              body: `ü§ñ **Claude AI Assistant**\n\n${reply}`
            });
            
            const postData = commentData;
            const options = {
              hostname: 'api.github.com',
              port: 443,
              path: `/repos/${repoFullName}/issues/${issueNumber}/comments`,
              method: 'POST',
              headers: {
                'Authorization': `token ${process.env.GITHUB_TOKEN}`,
                'Accept': 'application/vnd.github.v3+json',
                'Content-Type': 'application/json',
                'Content-Length': Buffer.byteLength(postData),
                'User-Agent': 'Claude-Assistant'
              }
            };
            
            await new Promise((resolve, reject) => {
              const req = https.request(options, (res) => {
                let data = '';
                res.on('data', (chunk) => data += chunk);
                res.on('end', () => {
                  console.log('GitHub API „É¨„Çπ„Éù„É≥„ÇπÁä∂ÊÖã:', res.statusCode);
                  if (res.statusCode >= 200 && res.statusCode < 300) {
                    console.log('‚úÖ „Ç≥„É°„É≥„ÉàÊäïÁ®øÊàêÂäü');
                    resolve();
                  } else {
                    console.error('‚ùå GitHub API „Ç®„É©„Éº:', data);
                    reject(new Error(`GitHub API „Ç®„É©„Éº: ${res.statusCode}`));
                  }
                });
              });
              
              req.on('error', (error) => {
                console.error('‚ùå „É™„ÇØ„Ç®„Çπ„Éà„Ç®„É©„Éº:', error);
                reject(error);
              });
              
              req.write(postData);
              req.end();
            });
            
          } catch (error) {
            console.error('‚ùå „Ç®„É©„ÉºÁô∫Áîü:', error);
            process.exit(1);
          }
        }
        
        main();
        EOF
        
        node claude-assistant.js
